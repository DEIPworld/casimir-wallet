@use 'sass:math';
@use 'sass:map';
@use 'sass:list';

@function strip-units($number) {
  @return math.div($number, ($number * 0 + 1));
}

@function get-position-list($left, $top) {
  $base-width: 1440;
  $base-height: 800;

  @return (
    left: 100vw * (math.div(strip-units($left), $base-width)),
    top: 100vh * (math.div(strip-units($top), $base-height))
  );
}

@mixin gen-props($map) {
  @each $prop, $value in $map {
    #{$prop}: $value
  }
}

$orbs: (
  1: (
    size: 320px,
    color: rgb(var(--v-theme-info)),
    opacity: .32,
    animation: (
      get-position-list(1260px, 65px),
      get-position-list(1260px, 65px),
    )
  ),
  2: (
    size: 420px,
    color: rgb(var(--v-theme-primary)),
    opacity: .3,
    animation: (
      get-position-list(1080px, 620px),
      get-position-list(1080px, 620px)
    )
  ),
  3: (
    size: 232px,
    color: rgb(var(--v-theme-primary)),
    opacity: .24,
    animation: (
      get-position-list(1193px, 113px),
      get-position-list(1193px, 113px)
    )
  ),
  4: (
    size: 562px,
    color: rgb(var(--v-theme-info)),
    opacity: .2,
    animation: (
      get-position-list(618px, 238px),
      get-position-list(618px, 238px)
    )
  )
);

.body-overlay {
  position: fixed;
  z-index: -1;
  left: 0;
  top: 0;
  width: 100vw;
  height: 100vh;
  background: var(--dw-body-color);
  pointer-events: none;

  @each $index, $params in $orbs {
    $size: map.get($params, size);
    $opacity: map.get($params, opacity);
    $anim: map.get($params, animation);

    $anim-name: 'orb-#{$index}-animation';
    $anim-count: list.length($anim);
    $anim-step: math.div(100%, $anim-count);
    $anim-steps: ();

    @for $i from 1 through $anim-count {
      $anim-steps: map.set($anim-steps, ($i - 1) * $anim-step, list.nth($anim, $i))
    }
    $anim-steps: map.set($anim-steps, '100%', list.nth($anim, 1));

    &__orb-#{$index} {
      @include gen-props(list.nth($anim, 1));

      position: absolute;
      background: map.get($params, color);
      width: $size;
      height: $size;
      opacity: $opacity;
      filter: blur(math.div($size, 2));

      //.body-overlay--animated & {
      //  animation: #{$anim-name} 3s linear infinite;
      //}
    }

    //@keyframes #{$anim-name} {
    //  @each $key, $props in $anim-steps {
    //    #{$key} {
    //      @include props($props)
    //    }
    //  }
    //}
  }
}
